// File: src/components/AboutUsPage.tsx
import { Timeline } from "flowbite-react";

function AboutUsPage() {
    return (
        <div className="main-background">
            <header>Our Story</header>
            <main className="container flex flex-col flex-grow items-center mx-auto">
                <Timeline className="w-2/4 h-80 sm:h-74 xl:h-90 2xl:h-106 pt-4">
                    <Timeline.Item className="!color-[#302218]">
                        <Timeline.Point />
                        <Timeline.Content>
                            <Timeline.Time className="!text-[#302218]">March 2022</Timeline.Time>
                            <Timeline.Title className="!text-[#302218]" >We opened!</Timeline.Title>
                            <Timeline.Body className="!text-[#302218]">
                                HiTea officially opened its doors, bringing handcrafted bubble tea and warm smiles to the community. From day one, our mission has been simple: serve delicious drinks made with love, fresh ingredients, and a touch of creativity.
                            </Timeline.Body>
                        </Timeline.Content>
                    </Timeline.Item>

                    <Timeline.Item>
                        <Timeline.Point />
                        <Timeline.Content>
                            <Timeline.Time className="!text-[#302218]">April 2022</Timeline.Time>
                            <Timeline.Title className="!text-[#302218]">A story of improvements</Timeline.Title>
                            <Timeline.Body className="!text-[#302218]">
                                After listening to our amazing customers, we enhanced our recipes and revamped our cozy interior to create an even better experience. New seasonal flavors were introduced, and every detail—from toppings to tea leaves—was refined with care.
                            </Timeline.Body>
                        </Timeline.Content>
                    </Timeline.Item>

                    <Timeline.Item>
                        <Timeline.Point />
                        <Timeline.Content>
                            <Timeline.Time className="!text-[#302218]">April 2025</Timeline.Time>
                            <Timeline.Title className="!text-[#302218]">More branches, more tea!</Timeline.Title>
                            <Timeline.Body className="!text-[#302218]">
                                Thanks to your support, HiTea has grown! We've proudly opened new locations to spread the joy of bubble tea even further—now more people can sip, relax, and enjoy the HiTea experience in their own neighborhoods.
                            </Timeline.Body>
                        </Timeline.Content>
                    </Timeline.Item>
                </Timeline>
            </main>
        </div>
    );
}

export default AboutUsPage;
// File: src/components/Cart.tsx
import { Sidebar, Button } from "flowbite-react";
import { useShoppingCart } from "../context/CartContext";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { FaShoppingCart } from "react-icons/fa";

function Cart() {
    const { cartItems, clearCart } = useShoppingCart();
    const [isOpen, setIsOpen] = useState(false);
    const navigate = useNavigate();

    const handleCheckout = () => {
        setIsOpen(false);
        navigate("/check-out");
    };

    return (
        <>
            <div className="fixed bottom-6 right-6 z-50">
                <button
                    onClick={() => setIsOpen(true)}
                    className="bg-red-600 text-white p-4 rounded-full shadow-lg hover:bg-red-700 transition"
                >
                    <FaShoppingCart size={24} />
                </button>
            </div>

            <Sidebar
                aria-label="Cart Sidebar"
                className={`fixed top-0 right-0 w-80 h-full z-50 transition-transform border-l shadow-xl ${isOpen ? "translate-x-0" : "translate-x-full"
                    }`}
            >
                <div className="p-4 h-full flex flex-col justify-between">
                    <div>
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-bold">Your Cart</h2>
                            <button
                                onClick={() => setIsOpen(false)}
                                className="text-red-600 font-bold text-lg"
                            >
                                ✕
                            </button>
                        </div>

                        {cartItems.length === 0 ? (
                            <p>Your cart is empty.</p>
                        ) : (
                            <ul className="space-y-2">
                                {cartItems.map((item, index) => (
                                    <li key={index} className="border p-2 rounded bg-gray-50">
                                        <p className="font-semibold">{item.name}</p>
                                        <p className="text-sm text-gray-600">
                                            {item.quantity} x {item.price} ={" "}
                                            <strong>{item.quantity * item.price} ft</strong>
                                        </p>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>

                    {/* Bottom Actions */}
                    {cartItems.length > 0 && (
                        <div className="flex flex-col gap-2">
                            <Button
                                onClick={handleCheckout}
                                className="!bg-green my-button"
                            >
                                Checkout
                            </Button>
                            <Button
                                onClick={clearCart}
                                className="!bg-red my-button"
                            >
                                Clear Cart
                            </Button>
                        </div>
                    )}
                </div>
            </Sidebar>
        </>
    );
}

export default Cart;

// File: src/components/CheckOutPage.tsx
import { useEffect, useState } from "react";
import { Label, TextInput, Button, Radio } from "flowbite-react";
import { useUserAuth } from "../context/userAuthContext";
import { useShoppingCart } from "../context/CartContext";
import { db } from "../libs/firebase";
import { addDoc, collection, doc, getDoc } from "firebase/firestore";
import { useNavigate } from "react-router-dom";

function CheckOutPage() {
    const { user } = useUserAuth();
    const { cartItems, clearCart } = useShoppingCart();

    const navigate = useNavigate();

    const [address, setAddress] = useState("");
    const [deliveryOption, setDeliveryOption] = useState("delivery");
    const [paymentOption, setPaymentOption] = useState("card");
    const [pickupLocation, setPickupLocation] = useState("");
    const [total, setTotal] = useState(0);


    const [isDeliverySelected, setIsDeliverySelected] = useState(true);
    const [isPickUpSelected, setIsPickUpSelected] = useState(false);
    const [isCardPayment, setIsCardPayment] = useState(true);
    const [isCashPayment, setIsCashPayment] = useState(false);

    useEffect(() => {
        const calcTotal = () => {
            const sum = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
            setTotal(sum);
        };
        calcTotal();
    }, [cartItems]);

    useEffect(() => {
        const fetchAddress = async () => {
            if (!user) return;
            const userRef = doc(db, "users", user.uid);
            const userSnap = await getDoc(userRef);

            if (userSnap.exists()) {
                const data = userSnap.data();
                setAddress(data.address || "");
            }
        };

        fetchAddress();
    }, [user]);

    const handleOrder = () => {
        console.log({
            cartItems,
            total,
            address,
            deliveryOption,
            pickupLocation,
            paymentOption,
        });

        alert("Order submitted!");
        clearCart();
    };

    const handlePlaceOrder = async () => {
        try {
            if (!user) {
                navigate("/login");
                return;
            }

            const itemSummary = cartItems
                .map(item => `${item.name}: ${item.quantity}`)
                .join(", ");

            await addDoc(collection(db, "ordersHistory"), {
                uid: user.uid,
                email: user.email,
                name: user.displayName || "Unknown",
                delivery: isDeliverySelected,
                pickUp: isPickUpSelected,
                items: cartItems.map(item => `${item.name}: ${item.quantity}`).join(", "),
                card: isCardPayment,
                cash: isCashPayment,
                orderDate: new Date()
            });

            clearCart();
            navigate("/menu");

        } catch (error) {
            console.error("Error placing order:", error);
        }
    };

    return (
        <main className="main-background">
            <div className="mx-auto max-w-md flex flex-col gap-4 bg-white p-6 rounded shadow-lg w-full mt-4 mb-4">
                <header className="text-center">Checkout</header>

                <div>
                    <span className="mb-2 font-semibold">Your Order:</span>
                    <ul className="divide-y">
                        {cartItems.map((item, index) => (
                            <li key={index} className="py-2 flex justify-between">
                                <span>{item.name} x {item.quantity}</span>
                                <span>{item.price * item.quantity} ft</span>
                            </li>
                        ))}
                    </ul>
                    <div className="mt-2 text-lg text-right">
                        <span>
                            Total: {total} ft
                        </span>
                    </div>
                </div>


                {deliveryOption === "delivery" && (
                    <div>
                        <Label htmlFor="address" >
                            <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2" >
                                Delivery Address
                            </span>
                        </Label>
                        <TextInput
                            id="address"
                            value={address}
                            placeholder="Your address..."
                            onChange={(e) => setAddress(e.target.value)}
                            required
                        />
                    </div>
                )}

                <div>
                    <div>
                        <Label>
                            <input
                                type="radio"
                                name="delivery"
                                checked={isDeliverySelected}
                                onChange={() => {
                                    setIsDeliverySelected(true);
                                    setIsPickUpSelected(false);
                                }}
                            />
                            <span> Delivery </span>
                        </Label>

                        <Label className="ml-4">
                            <input
                                type="radio"
                                name="pickup"
                                checked={isPickUpSelected}
                                onChange={() => {
                                    setIsDeliverySelected(false);
                                    setIsPickUpSelected(true);
                                }}
                            />
                            <span> Pick up </span>
                        </Label>
                    </div>
                    {deliveryOption === "pickup" && (
                        <div className="mt-2 pl-4">
                            <Label value="Pickup Location" />
                            <div className="flex flex-col gap-1 mt-1">
                                {["Astoria", "Oktogon", "Buda"].map((loc) => (
                                    <Label key={loc} className="flex items-center gap-2">
                                        <Radio
                                            name="pickup-location"
                                            checked={pickupLocation === loc}
                                            onChange={() => setPickupLocation(loc)}
                                        />
                                        {loc}
                                    </Label>
                                ))}
                            </div>
                        </div>
                    )}
                </div>

                <div>
                    <Label>
                        <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2 mt-2">
                            Payment Method
                        </span>
                    </Label>
                    <Label>
                        <input
                            type="radio"
                            name="payment"
                            checked={isCardPayment}
                            onChange={() => {
                                setIsCardPayment(true);
                                setIsCashPayment(false);
                            }}
                        />
                        <span> Card </span>
                    </Label>
                    <Label className="ml-4">
                        <input
                            type="radio"
                            name="payment"
                            checked={isCashPayment}
                            onChange={() => {
                                setIsCardPayment(false);
                                setIsCashPayment(true);
                            }}
                        />
                        <span> Cash </span>
                    </Label>

                    {paymentOption === "card" && (
                        <div className="mt-4 pl-4 flex flex-col mb-2 text-[#362314]">
                            <Label> <span>Accout number for transfer:</span> </Label>
                            <p>1234567890</p>
                            <Label className="pt-2">
                                <span>
                                    Name:
                                </span>
                            </Label>
                            <p>HiTea Owner</p>
                            <Label className="pt-2">
                                <span>
                                    Address:
                                </span>
                            </Label>
                            <p>Budapest 1</p>
                        </div>
                    )}
                </div>

                <Button onClick={handlePlaceOrder} disabled={cartItems.length < 1}>
                    Place Order
                </Button>
            </div>
        </main >
    );
}

export default CheckOutPage;

// File: src/components/ContactPage.tsx
import { Card } from "flowbite-react";
import { Tabs } from "flowbite-react";

function ContactPage() {
    return (
        <div className="main-background">
            <header>Our Restaurants</header>
            <main className="w-2/5">
                <Tabs className="pt-5">
                    <Tabs.Item active title="on Astoria" >
                        <Card className="max-w-xl mx-auto">
                            <img src="/astoria.png" />
                            <h5> <span>Address:</span> Semmelwseis utca 15</h5>
                            <p> <span>Phone number:</span> +362048.... </p>
                            <p>...there will be reviews...</p>
                        </Card>
                    </Tabs.Item>

                    <Tabs.Item active title="in Oktogon" className="my-tabs">
                        <Card className="max-w-xl mx-auto">
                            <img src="/oktogon.png" />
                            <h5> <span>Address:</span> Chengery utca 15</h5>
                            <p> <span>Phone number:</span> +362048.... </p>
                            <p>...there will be reviews...</p>
                        </Card>
                    </Tabs.Item>
                    <Tabs.Item active title="on Buda side" >
                        <Card className="max-w-xl mx-auto">
                            <img src="/buda.png" />
                            <h5> <span>Address:</span> Istvan utca 15</h5>
                            <p> <span>Phone number:</span> +362048.... </p>
                            <p>...there will be reviews...</p>
                        </Card>
                    </Tabs.Item>
                </Tabs>
            </main>
        </div>
    );
}

export default ContactPage;

// File: src/components/ErrorPage.tsx
function ErrorPage() {
    return (
        <main className="main-background">
            <header>Page does not exist... </header>
            <div className="max-w-sm mx-auto mt-4">
                <div className="w-[300px] pb-[10px]">
                    <img src="../assets/error-page-cat-img.jpg" alt="" />
                </div>
                <h1>Please click on one of the valid links above.</h1>
            </div>
        </main>
    );
}

export default ErrorPage;

// File: src/components/Floatingcart.tsx
import { Sidebar } from "flowbite-react";
import { useShoppingCart } from "../context/CartContext";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { FaShoppingCart } from "react-icons/fa";

function Floatingcart() {
    const { cartItems, clearCart } = useShoppingCart();
    const [isOpen, setIsOpen] = useState(false);
    const navigate = useNavigate();

    const handleCheckout = () => {
        setIsOpen(false);
        navigate("/checkout");
    };

    return (
        <>
            {/* Floating Cart Icon */}
            <div className="fixed bottom-6 right-6 z-50">
                <button
                    onClick={() => setIsOpen(true)}
                    className="bg-red-600 text-white p-4 rounded-full shadow-lg hover:bg-red-700 transition"
                >
                    <FaShoppingCart size={24} />
                </button>
            </div>

            {/* Sidebar */}
            <Sidebar
                aria-label="Cart Sidebar"
                className={`fixed top-0 right-0 w-80 h-full z-50 transition-transform bg-white border-l shadow-xl ${isOpen ? "translate-x-0" : "translate-x-full"
                    }`}
            >
                <div className="p-4 h-full flex flex-col justify-between">
                    <div>
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-bold">Your Cart</h2>
                            <button
                                onClick={() => setIsOpen(false)}
                                className="text-red-600 font-bold text-lg"
                            >
                                ✕
                            </button>
                        </div>

                        {cartItems.length === 0 ? (
                            <p>Your cart is empty.</p>
                        ) : (
                            <ul className="space-y-2">
                                {cartItems.map((item, index) => (
                                    <li key={index} className="border p-2 rounded bg-gray-50">
                                        <p className="font-semibold">{item.name}</p>
                                        <p className="text-sm text-gray-600">
                                            {item.quantity} x {item.price} ={" "}
                                            <strong>{item.quantity * item.price} ft</strong>
                                        </p>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>

                    {/* Bottom Actions */}
                    {cartItems.length > 0 && (
                        <div className="flex flex-col gap-2">
                            <button
                                onClick={handleCheckout}
                                className="bg-green-600 text-white p-2 rounded hover:bg-green-700"
                            >
                                Checkout
                            </button>
                            <button
                                onClick={clearCart}
                                className="bg-red-600 text-white p-2 rounded hover:bg-red-700"
                            >
                                Clear Cart
                            </button>
                        </div>
                    )}
                </div>
            </Sidebar>
        </>
    );
}

export default Floatingcart;

// File: src/components/Foot.tsx
import { Footer } from "flowbite-react";
import { BsFacebook, BsGithub, BsInstagram } from "react-icons/bs";

function Foot() {
    return (
        <Footer container className="bg-[#523a28] rounded-none rounded-t">
            <div className="w-full">
                <div className="w-full sm:flex sm:items-center sm:justify-between">
                    <Footer.Copyright by="HiTea" year={2022} className="text-[#e4d4c8]" />
                    <div className="flex space-x-6 sm:justify-center">
                        <Footer.Icon href="https://www.facebook.com/elina.omurkulova.73" icon={BsFacebook} className="text-[#e4d4c8] hover:text-[#a47551]" />
                        <Footer.Icon href="https://www.instagram.com/eliomt_/" icon={BsInstagram} className="text-[#e4d4c8] hover:text-[#a47551]" />
                        <Footer.Icon href="https://github.com/ElOm24" icon={BsGithub} className="text-[#e4d4c8] hover:text-[#a47551]" />
                    </div>
                </div>
            </div>
        </Footer>
    );
}

export default Foot;
// File: src/components/Home.tsx
import { Carousel } from "flowbite-react";

function Home() {
  return (
    <main className="main-background">
      <header>Welcome to HiTea!</header>
      <h1 className="pt-5 text-[#302218] pb-4">Current special offers:</h1>
      <div className="w-[60%] mx-auto h-80">
        <Carousel>
          <img src="../assets/offer1.png" alt="offer1" />
          <img src="../assets/offer2.png" alt="offer2" />
          <img src="../assets/offer3.png" alt="offer3" />
          <img src="../assets/offer4.png" alt="offer4" />
          <img src="../assets/offer5.png" alt="offer5" />
        </Carousel>
      </div>
    </ main>
  );
}

export default Home;

// File: src/components/LoginPage.tsx
import { Button, Label, TextInput, Alert } from "flowbite-react";
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { useUserAuth } from "../context/userAuthContext";
import { HiInformationCircle } from "react-icons/hi";
import { AuthError } from "firebase/auth";
import { FaEye, FaEyeSlash } from "react-icons/fa";


function LoginPage() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [showPassword, setShowPassword] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");

    const { logIn } = useUserAuth();
    const navigate = useNavigate();

    const handleSignUp = () => {
        navigate("/sign-up");
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        try {
            const userCredential = await logIn(email, password);
            console.log("User logged in successfully:", userCredential.user);

            setSuccessMessage("User logged in successfully.");
            setErrorMessage("");

            navigate("/menu");
        } catch (error) {
            console.error("Error logging in:", error);

            const authError = error as AuthError;
            if (authError.code === "auth/wrong-password") {
                setErrorMessage("Wrong password, try again.");
            } else {
                setErrorMessage("Login failed. Please check your credentials.");
            }

            setSuccessMessage("");
        }
    };

    return (
        <main className="main-background">
            <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-[90%] max-w-md">
                {successMessage && (
                    <Alert color="success" onDismiss={() => setSuccessMessage("")}>
                        {successMessage}
                    </Alert>
                )}
                {errorMessage && (
                    <Alert
                        color="failure"
                        icon={HiInformationCircle}
                        onDismiss={() => setErrorMessage("")}
                    >
                        {errorMessage}
                    </Alert>
                )}
            </div>

            <header>Login</header>
            <div className="w-2/5 max-w-sm">
                <form className="flex flex-col gap-4" onSubmit={handleSubmit}>
                    <div className="mt-4">
                        <div className="mb-2 block">
                            <Label htmlFor="email1">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2">Your email</span>
                            </Label>
                        </div>
                        <TextInput
                            id="email1"
                            type="email"
                            placeholder="name@gmail.com"
                            required
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                        />
                    </div>

                    <div>
                        <div className="mb-2">
                            <Label htmlFor="password1">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2">Your password</span>
                            </Label>
                        </div>
                        <div className="relative">
                            <TextInput
                                id="password1"
                                type={showPassword ? "text" : "password"}
                                required
                                value={password}
                                placeholder="password"
                                onChange={(e) => setPassword(e.target.value)}
                                className="pr-10"
                            />
                            <button
                                type="button"
                                onClick={() => setShowPassword((prev) => !prev)}
                                className="absolute right-2 top-1/2 transform -translate-y-1/2 text-[#523a28]"
                            >
                                {showPassword ? <FaEyeSlash size={18} /> : <FaEye size={18} />}
                            </button>
                        </div>
                    </div>


                    <Button type="submit" className="my-button">Submit</Button>

                    <div className="text-[#362314] mt-4">
                        <p>Don't have an account?</p>
                        <a className="underline cursor-pointer" onClick={handleSignUp}>
                            Sign up
                        </a>
                    </div>

                </form>
            </div>
        </main>
    );
}

export default LoginPage;

// File: src/components/MenuItem.tsx
import { Button, Card } from "flowbite-react";
import { useUserAuth } from "../context/userAuthContext";
import { useNavigate } from "react-router-dom";
import { useShoppingCart } from "../context/CartContext";

interface Props {
    firestoreId: string;
    id: string;
    preparationTime: number;
    ProductName: string;
    Price: number;
    description: string;
    isAdmin: boolean;
    onEdit: (item: any) => void;
    onDelete: () => void;
}

function MenuItem({
    firestoreId,
    id,
    ProductName,
    Price,
    description,
    preparationTime,
    isAdmin,
    onEdit,
    onDelete,
}: Props) {
    const localImagePath = `../assets/menu-img/${id}.png`;

    const { user } = useUserAuth();
    const navigate = useNavigate();
    const { addToCart } = useShoppingCart();

    const handleOrder = () => {
        if (!user) {
            navigate("/login");
            return;
        }

        addToCart({
            id,
            name: ProductName,
            price: Number(Price),
            quantity: 1,
        });
    };

    return (
        <Card>
            <img
                src={localImagePath}
                alt={ProductName}
                className="w-full h-[280px] object-contain rounded"
                onError={(e) => {
                    (e.target as HTMLImageElement).src = "/assets/menu-img/default.png";
                }}
            />
            <p><strong>Name:</strong> {ProductName}</p>
            <p><strong>Price:</strong> {Price}</p>
            <p>{description}</p>
            <Button className="my-button text-white" onClick={handleOrder}>Order</Button>

            {isAdmin && (
                <div className="flex justify-between mt-2">
                    <Button
                        color="warning"
                        onClick={() =>
                            onEdit({ firestoreId, id, ProductName, Price, description, preparationTime })
                        }
                    >
                        Edit
                    </Button>
                    <Button color="failure" onClick={onDelete}>
                        Delete
                    </Button>
                </div>
            )}
        </Card>
    );
}

export default MenuItem;

// File: src/components/MenuPage.tsx
import { useEffect, useState } from "react";
import { useUserAuth } from '../context/userAuthContext';
import {
  collection,
  addDoc,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import { db } from "../libs/firebase";
import { Button, Label, TextInput } from "flowbite-react";
import Cart from "./Cart";

import MenuItem from "./MenuItem";

function MenuPage() {
  const { isAdmin } = useUserAuth();
  const [menuItems, setMenuItems] = useState<any[]>([]);
  const [showDialog, setShowDialog] = useState(false);
  const [editing, setEditing] = useState(false);

  const [newItem, setNewItem] = useState({
    firestoreId: "",
    id: "",
    ProductName: "",
    Price: "",
    description: "",
  });

  useEffect(() => {
    const fetchData = async () => {
      const querySnapshot = await getDocs(collection(db, "menu"));
      const items = querySnapshot.docs.map(doc => ({
        firestoreId: doc.id,
        ...doc.data(),
      }));
      setMenuItems(items);
    };
    fetchData();
  }, []);

  const handleAddItem = async () => {
    try {
      if (editing) {
        await updateDoc(doc(db, "menu", newItem.firestoreId), {
          id: newItem.id,
          ProductName: newItem.ProductName,
          Price: newItem.Price,
          description: newItem.description,
        });

        setMenuItems(prev =>
          prev.map(item =>
            item.firestoreId === newItem.firestoreId ? { ...item, ...newItem } : item
          )
        );
      } else {
        const docRef = await addDoc(collection(db, "menu"), {
          id: newItem.id,
          ProductName: newItem.ProductName,
          Price: newItem.Price,
          description: newItem.description,
        });

        setMenuItems(prev => [
          ...prev,
          { ...newItem, firestoreId: docRef.id }
        ]);
      }

      setShowDialog(false);
      setNewItem({ firestoreId: "", id: "", ProductName: "", Price: "", description: "" });
      setEditing(false);
    } catch (error) {
      console.error("Error adding/updating item: ", error);
    }
  };

  const handleEdit = (item: any) => {
    setNewItem(item);
    setEditing(true);
    setShowDialog(true);
  };

  const handleDelete = async (firestoreId: string) => {
    try {
      await deleteDoc(doc(db, "menu", firestoreId));
      setMenuItems(prev => prev.filter(item => item.firestoreId !== firestoreId));
    } catch (error) {
      console.error("Error deleting item: ", error);
    }
  };

  return (
    <div className="main-background">
      <header className="flex justify-center"> {isAdmin ? "View: Admin" : "Our Menu"} </header>

      {isAdmin && (
        <div className="flex justify-center mt-6">
          <Button
            onClick={() => {
              setShowDialog(true);
              setEditing(false);
              setNewItem({ firestoreId: "", id: "", ProductName: "", Price: "", description: "" });
            }}
            className="my-button"> Add Bubble Tea
          </Button>
        </div>
      )}

      {showDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50">
          <div className="bg-[#e4d4c8] p-6 rounded-md w-[400px] shadow-lg">
            <h2 className="text-lg font-semibold mb-4 self-center text-[#523a28]">{editing ? "Edit" : "Add"} Bubble Tea</h2>
            <Label className="p-2 text-[#523a28]">Image id</Label>
            <TextInput
              placeholder="Image ID (e.g., 1, 2)"
              className="p-2 w-full mb-2 text-[#523a28]"
              value={newItem.id}
              onChange={(e) => setNewItem({ ...newItem, id: e.target.value })}
            />

            <Label className="p-2 text-[#523a28]">Product name</Label>
            <TextInput
              placeholder="Product name"
              className="p-2 w-full mb-2 text-[#523a28]"
              value={newItem.ProductName}
              onChange={(e) => setNewItem({ ...newItem, ProductName: e.target.value })}
            />

            <Label className="p-2 text-[#523a28]">Price</Label>
            <TextInput
              placeholder="Price"
              className="p-2 w-full mb-2"
              value={newItem.Price}
              onChange={(e) => setNewItem({ ...newItem, Price: e.target.value })}
            />

            <Label className="p-2 text-[#523a28]">Description</Label>
            <TextInput id="large" sizing="lg"
              placeholder="Description"
              className="p-2 w-full mb-4"
              value={newItem.description}
              onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}
            />

            <div className="flex justify-end gap-2">
              <Button
                onClick={() => setShowDialog(false)}
                className="my-button"
              >
                Cancel
              </Button>
              <Button
                onClick={handleAddItem}
                className="my-button"
              >
                {editing ? "Save Changes" : "Add"}
              </Button>
            </div>
          </div>
        </div>
      )}

      <main className='mb-[45px]'>
        <div className="container mx-auto px-4 mt-8 grid grid-cols-3 gap-4">
          {menuItems.map((item) => (
            <div className="max-w-sm" key={item.firestoreId}>
              <MenuItem
                {...item}
                isAdmin={isAdmin}
                onEdit={handleEdit}
                onDelete={() => handleDelete(item.firestoreId)}
              />
            </div>
          ))}
        </div>
        <Cart />
      </main>
    </div>
  );
}

export default MenuPage;

// File: src/components/Nav.tsx
import { Avatar, Dropdown, Navbar } from "flowbite-react";
import { useLocation } from "react-router-dom";
import { useUserAuth } from "../context/userAuthContext";
import { useNavigate } from "react-router-dom";

function Nav() {
    const curr_location = useLocation();
    const { user, logOut } = useUserAuth();

    const navigate = useNavigate();

    const isActive = (pathname: string) => curr_location.pathname === pathname;

    const handleSignOut = async () => {
        try {
            await logOut();
            navigate("/login");
        } catch (err) {
            console.error("Error signing out", err);
        }
    };

    return (
        <Navbar fluid className="bg-[#523a28] rounded-b">
            <Navbar.Brand>
                <img
                    src="../assets/logo.svg"
                    className="h-7 sm:h-10"
                    alt="HiTea logo"
                />
                <span className="font-semibold text-[#e4d4c8] mt-[5px]">
                    HiTea
                </span>

            </Navbar.Brand>

            <div className="flex md:order-2">
                <Dropdown
                    arrowIcon={false}
                    inline
                    label={
                        <Avatar
                            alt="User settings"
                            img="../assets/avatar1.png"
                            rounded
                        />
                    }
                >
                    {user && (
                        <>
                            <Dropdown.Header>
                                <span className="block truncate text-sm font-medium">
                                    {user.email}
                                </span>
                                <span className="block text-sm">
                                    {user.displayName || "User"}
                                </span>
                            </Dropdown.Header>
                            <Dropdown.Item onClick={() => navigate("/user-page")}>
                                Settings
                            </Dropdown.Item>
                            <Dropdown.Divider />
                        </>
                    )}
                    <Dropdown.Item
                        onClick={() => {
                            user ? handleSignOut() : navigate("/login");
                        }}
                    >
                        {user ? "Sign out" : "Login"}
                    </Dropdown.Item>
                </Dropdown>
                <Navbar.Toggle />
            </div>

            <Navbar.Collapse className="my-navbar-links">
                <Navbar.Link href="/home"
                    className={`my-navbar-links ${isActive("/home") ? "text-[#a47551]" : ""}`}
                >
                    Home
                </Navbar.Link>
                <Navbar.Link href="/about-us" className={`my-navbar-links ${isActive("/about-us") ? "text-[#a47551]" : ""}`}
                >
                    About Us
                </Navbar.Link>
                <Navbar.Link href="/menu" className={`my-navbar-links ${isActive("/menu") ? "text-[#a47551]" : ""}`}
                >
                    Menu
                </Navbar.Link>
                <Navbar.Link href="/contact" className={`my-navbar-links ${isActive("/contact") ? "text-[#a47551]" : ""}`}
                >
                    Contact
                </Navbar.Link>
            </Navbar.Collapse>
        </Navbar>
    );
}

export default Nav;
// File: src/components/SignupPage.tsx
import { Button, Label, TextInput } from "flowbite-react";
import { useState } from "react";
import { useUserAuth } from "../context/userAuthContext";
import { Alert } from "flowbite-react"
import { HiInformationCircle } from "react-icons/hi";
import { useNavigate } from "react-router-dom";
import { AuthError } from "firebase/auth";

function SignupPage() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [successMessage, setSuccessMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [showPassword, setShowPassword] = useState(false);


    const { signUp } = useUserAuth();
    const navigate = useNavigate();


    const handleLogin = () => {
        navigate("/login");
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        try {
            const userCredential = await signUp(email, password);
            console.log("User created successfully:", userCredential.user);
            setSuccessMessage("User was created successfully.");
            setErrorMessage("");

            navigate("/menu");
        } catch (error) {
            console.error("Error signing up:", error);

            const authError = error as AuthError;

            if (authError.code === "auth/email-already-in-use") {
                setErrorMessage("User exists already, please login.");

            } else {
                setErrorMessage("Error signing up. Please try again.");
            }

            setSuccessMessage("");
        }
    };


    return (
        <main className="main-background">
            <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-[90%] max-w-md">
                {successMessage && (
                    <Alert color="success" onDismiss={() => setSuccessMessage("")}>
                        {successMessage}
                    </Alert>
                )}
                {errorMessage && (
                    <Alert color="failure" icon={HiInformationCircle} onDismiss={() => setErrorMessage("")}>
                        {errorMessage}
                    </Alert>
                )}
            </div>

            <header>Sign up</header>
            <div className="w-2/5 max-w-sm">
                <form className="flex flex-col gap-4" onSubmit={handleSubmit}>
                    <div>
                        <div className="mt-4 block">
                            <Label htmlFor="email1">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2">Your email</span>
                            </Label>
                        </div>
                        <TextInput id="email1" type="email" placeholder="name@gmail.com" required value={email}
                            onChange={(e) => setEmail(e.target.value)} />
                    </div>
                    <div>
                        <div className="mb-2 block">
                            <Label htmlFor="password1" >
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2">Your password</span>
                            </Label>
                        </div>
                        <div className="relative">
                            <TextInput
                                id="password1"
                                type={showPassword ? "text" : "password"}
                                required
                                value={password}
                                placeholder="password"
                                onChange={(e) => setPassword(e.target.value)}
                                className="pr-10"
                            />
                            <button
                                type="button"
                                onClick={() => setShowPassword((prev) => !prev)}
                                className="absolute right-2 top-1/2 transform -translate-y-1/2"
                            >
                                <img
                                    src={showPassword ? "../assets/eye.png" : "../assets/eye-active.png"}
                                    alt="Toggle password visibility"
                                    className="w-5 h-5"
                                />
                            </button>
                        </div>

                    </div>

                    <Button type="submit" className="my-button">Submit</Button>
                </form>

                <div className="text-[#362314] mt-4">
                    <p>Already have an account?</p>
                    <a className="underline cursor-pointer" onClick={handleLogin}>
                        Login
                    </a>
                </div>
            </div>
        </main>
    );
}

export default SignupPage;

// File: src/components/UserPage.tsx
import { Label, TextInput, Button, Alert } from "flowbite-react";
import { updateProfile } from "firebase/auth";
import { useEffect, useState } from "react";
import { useUserAuth } from "../context/userAuthContext";
import { auth, db } from "../libs/firebase";
import { doc, updateDoc, getDoc } from "firebase/firestore";
import { FaPen, FaHouseUser, FaUser, FaPhoneAlt } from "react-icons/fa";

function UserPage() {
    const { user, setUser } = useUserAuth();
    const [name, setName] = useState(user?.displayName || "");
    const [phone, setPhone] = useState("");
    const [address, setAddress] = useState("");


    const [showAlert, setShowAlert] = useState(false);
    const [isEditing, setIsEditing] = useState(false);

    useEffect(() => {
        const fetchExtraUserData = async () => {
            if (!user) return;
            const userRef = doc(db, "users", user.uid);
            const userSnap = await getDoc(userRef);

            if (userSnap.exists()) {
                const data = userSnap.data();
                setPhone(data.phone || "");
                setAddress(data.address || "");
            }
        };

        fetchExtraUserData();
    }, [user]);


    const handleProfileUpdate = async () => {
        if (!user) return;

        try {
            await updateProfile(user, { displayName: name });
            await auth.currentUser?.reload();

            const userRef = doc(db, "users", user.uid);
            await updateDoc(userRef, {
                displayName: name,
                phone,
                address,
            });


            const updatedUser = auth.currentUser;
            if (updatedUser) {
                setUser({ ...updatedUser });
                setName("");
                setPhone("");
                setAddress("");
                setShowAlert(true);
                setIsEditing(false);
            }

            console.log("Profile updated!");
        } catch (error) {
            console.error("Error updating profile:", error);
        }
    };


    return (
        <main className="main-background">
            <div className="mx-auto max-w-md flex flex-col">
                <header> User Settings Page </header>

                <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-[90%] max-w-md">
                    {showAlert && (
                        <Alert color="success" onDismiss={() => setShowAlert(false)}>
                            <span className="font-medium">User data successfully updated!</span>
                        </Alert>
                    )}
                </div>

                {!isEditing && (
                    <div className="m-4 p-4 bg-[#e4d4c8] rounded text-[#362314] font-semibold">
                        <p> Email: {user?.email} </p>
                        <p> Name: {user?.displayName ?? "No name set"} </p>
                        <p> Phone number: {phone || "No phone number set"} </p>
                        <p> Delivery address: {address || "No address set"}</p>
                        <Button onClick={() => setIsEditing(true)} className="my-button self-center mt-2">
                            <span className="flex items-center gap-2">
                                Edit Profile <FaPen size={14} />
                            </span>
                        </Button>
                    </div>

                )}

                {isEditing && (
                    <div className="mt-4 flex flex-col gap-4">
                        <div>
                            <Label htmlFor="username">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2"> <FaUser size={14} /> Name</span>
                            </Label>
                            <TextInput
                                id="username"
                                placeholder="Enter your name"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                required
                            />
                        </div>

                        <div>
                            <Label htmlFor="phone-number">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2"> <FaPhoneAlt size={14} /> Phone number</span>
                            </Label>
                            <TextInput
                                id="phone-number"
                                placeholder="+36..."
                                value={phone}
                                onChange={(e) => setPhone(e.target.value)}
                                required
                            />
                        </div>

                        <div>
                            <Label htmlFor="user-address">
                                <span className="flex items-center gap-2 text-[#362314] font-medium ml-2 mb-2"> <FaHouseUser size={14} /> Address</span>
                            </Label>
                            <TextInput
                                id="user-address"
                                placeholder="Some Street"
                                value={address}
                                onChange={(e) => setAddress(e.target.value)}
                                required
                            />
                        </div>

                        <div className="flex gap-2">
                            <Button onClick={handleProfileUpdate} className="my-button">
                                Save Changes
                            </Button>
                            <Button color="gray" onClick={() => setIsEditing(false)}>
                                Cancel
                            </Button>
                        </div>
                    </div>
                )}
            </div>
        </main >
    );
}

export default UserPage;

// File: src/context/CartContext.tsx
import { createContext, useContext, useEffect, useState } from "react";

type CartItem = {
    id: string;
    name: string;
    price: number;
    quantity: number;
};

type CartContextType = {
    cartItems: CartItem[];
    addToCart: (item: CartItem) => void;
    clearCart: () => void;
};

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: React.ReactNode }) {
    const [cartItems, setCartItems] = useState<CartItem[]>([]);

    useEffect(() => {
        const storedCart = localStorage.getItem("cart");
        if (storedCart) setCartItems(JSON.parse(storedCart));
    }, []);

    useEffect(() => {
        localStorage.setItem("cart", JSON.stringify(cartItems));
    }, [cartItems]);

    const addToCart = (item: CartItem) => {
        setCartItems(prev => {
            const existing = prev.find(i => i.id === item.id);
            if (existing) {
                return prev.map(i =>
                    i.id === item.id ? { ...i, quantity: i.quantity + item.quantity } : i
                );
            }
            return [...prev, item];
        });
    };

    const clearCart = () => setCartItems([]);

    return (
        <CartContext.Provider value={{ cartItems, addToCart, clearCart }}>
            {children}
        </CartContext.Provider>
    );
}

export function useShoppingCart() {
    const context = useContext(CartContext);
    if (!context) throw new Error("useShoppingCart must be used inside CartProvider");
    return context;
}

// File: src/context/userAuthContext.tsx
import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    signInWithPopup,
    onAuthStateChanged,
    GoogleAuthProvider,
    User,
} from "firebase/auth";
import { collection, query, where, getDocs } from "firebase/firestore";

import { doc, setDoc } from "firebase/firestore";
import { db } from "../libs/firebase";

import { createContext, useEffect, useState, useContext } from "react";
import { auth } from "../libs/firebase";

interface IUserAuthProviderProps {
    children: React.ReactNode;
}

type AuthContextData = {
    user: User | null;
    isAdmin: boolean;
    logIn: typeof logIn;
    signUp: typeof signUp;
    logOut: typeof logOut;
    googleSignIn: typeof googleSignIn;
    setUser: React.Dispatch<React.SetStateAction<User | null>>;
}

const logIn = (email: string, password: string) => {
    return signInWithEmailAndPassword(auth, email, password)
}

const signUp = async (email: string, password: string) => {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    await setDoc(doc(db, "users", user.uid), {
        uid: user.uid,
        email: user.email,
        createdAt: new Date().toISOString(),
    });

    return userCredential;
};


const logOut = () => {
    signOut(auth)
}

const googleSignIn = () => {
    const googleAuthProvider = new GoogleAuthProvider();
    return signInWithPopup(auth, googleAuthProvider);
}

export const userAuthContext = createContext<AuthContextData>({
    user: null,
    isAdmin: false,
    logIn,
    signUp,
    logOut,
    googleSignIn,
    setUser: () => { },
});

export const UserAuthProvider: React.FunctionComponent<IUserAuthProviderProps> = ({ children }) => {

    const [user, setUser] = useState<User | null>(null);
    const [isAdmin, setIsAdmin] = useState<boolean>(false);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            console.log("Auth state changed: ", currentUser);
            setUser(currentUser);
            if (currentUser?.email) {
                const q = query(
                    collection(db, "specialUsers"),
                    where("email", "==", currentUser.email),
                    where("isAdmin", "==", true),
                );

                const querySnapshot = await getDocs(q);
                setIsAdmin(!querySnapshot.empty);
            } else {
                setIsAdmin(false);
            }
        });

        return () => unsubscribe();
    }, []);



    const value: AuthContextData = {
        user,
        isAdmin,
        logIn,
        signUp,
        logOut,
        googleSignIn,
        setUser,
    };

    return (
        <userAuthContext.Provider value={value}>{children}</userAuthContext.Provider>
    );
};

export const useUserAuth = () => {
    return useContext(userAuthContext);
}


// File: src/hooks/getMenuData.ts
import { useEffect, useState } from 'react';
import { db } from '../libs/firebase';
import { collection, getDocs } from 'firebase/firestore';

export interface MenuItemData {
    id: string;
    ProductName: string;
    Price: number;
    description: string;
    imageLink: string;
}

export function GetMenuData() {
    const [menuItems, setMenuItems] = useState<MenuItemData[]>([]);

    useEffect(() => {
        const fetchMenuItems = async () => {
            const querySnapshot = await getDocs(collection(db, "menu"));
            const items = querySnapshot.docs.map(doc => doc.data() as MenuItemData);
            setMenuItems(items);
        };

        fetchMenuItems();
    }, [db]);

    return menuItems;
}
// File: src/libs/firebase.ts
//imports
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
// import { getStorage } from "firebase/storage";

// Firebase connection parameters
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_APIKEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGE_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

// Initialization of the Authenticator
console.log('Firebase config:', firebaseConfig);
const app = initializeApp(firebaseConfig);

//Exports
export const auth = getAuth(app);
export const db = getFirestore(app);
// export const storage = getStorage(app);

// File: src/App.tsx
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './components/Home';
import Nav from './components/Nav';
import Foot from './components/Foot';
import AboutUsPage from './components/AboutUsPage';
import ContactPage from './components/ContactPage';
import MenuPage from './components/MenuPage';
import LoginPage from './components/LoginPage';
import SignupPage from './components/SignupPage';
import ErrorPage from './components/ErrorPage';
import UserPage from './components/UserPage';
import CheckOutPage from './components/CheckOutPage';
import { UserAuthProvider } from './context/userAuthContext';
import { CartProvider } from './context/CartContext';



function App() {
  return (
    <CartProvider>
      <UserAuthProvider>
        <Router>
          <Nav />
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/home" element={<Home />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/sign-up" element={<SignupPage />} />
            <Route path="/about-us" element={<AboutUsPage />} />
            <Route path="/menu" element={<MenuPage />} />
            <Route path="/contact" element={<ContactPage />} />
            <Route path="/user-page" element={<UserPage />} />
            <Route path="/check-out" element={<CheckOutPage />} />
            <Route path="/*" element={<ErrorPage />} />
          </Routes>
          <Foot />
        </Router>
      </UserAuthProvider>
    </CartProvider>
  );
}

export default App;
// File: src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    background-color: #e4d4c8;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

main {}

.main-background {
    width: 100%;

    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-image: url('../assets/new-bg.svg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

header {
    padding-top: 1.6rem;
    font-size: 1.2rem;
    font-weight: 600;
    color: #362314;
    align-self: center;
}

span {
    color: #362314;
}

.my-navbar-links {
    color: #e4d4c8;
    font-weight: normal;
}

.my-navbar-links a:hover {
    color: #a47551;
}

.my-navbar-links[data-active="true"] {
    color: #a47551 !important;
}

.my-tabs {
    outline: none;
    color: #a47551;
}

.my-button {
    background-color: #523a28 !important;
}

.my-button:hover {
    background-color: #b29b8a !important;
}


/*
input {
    @apply shadow-lg;
}
*/

.my-scrollable-container {
    overflow-y: scroll;
    height: 100vh;
}

/* Firefox scrollbar settings */
.my-scrollable-container {
    scrollbar-width: thin;
    scrollbar-color: #888 #f1f1f1;
}

/* Chrome/Edge/Safari */
.my-scrollable-container::-webkit-scrollbar {
    width: 8px;
}

.my-scrollable-container::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.my-scrollable-container::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 10px;
    border: 2px solid #f1f1f1;
}

.my-scrollable-container::-webkit-scrollbar-thumb:hover {
    background-color: #555;
}
// File: src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)



